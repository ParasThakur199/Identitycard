package com.idcard.Controller;

import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

//import java.io.IOException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.idcard.Model.IdcardEntity;
import com.idcard.Payload.FormLabelsDTO;
import com.idcard.Payload.IdcardDTO;
import com.idcard.Payload.IdcardGetDTO;
import com.idcard.Payload.StateDTO;
import com.idcard.Repository.IdCardRepository;
import com.idcard.Service.FileService;
import com.idcard.Service.FormLabelsService;
import com.idcard.Service.IdcardService;
import com.idcard.Service.StateService;
import com.idcard.Service.TransactionService;

@RestController
@CrossOrigin
public class Idcardcontroller {
	
	@Autowired
	private IdcardService idcardService;
	
	@Autowired
	private FormLabelsService formlabelsService;
	
	@Autowired
	private TransactionService transactionService;
	
	@Autowired
	private FileService fileService;
	
	@Autowired
    private StateService stateService;
	
	@PostMapping("/submitform")
	public ResponseEntity<String> saveData(@ModelAttribute IdcardDTO dto)
	{ 
		try {
			String response = idcardService.saveIdcard(dto);
//	        return ResponseEntity.ok(response);
	        return ResponseEntity.ok(id);
		} catch (Exception e) {
		return ResponseEntity.status(500).body("Failed to save data: " + e.getMessage());
		}
	}
	
	@GetMapping("/getAllFormLabels/{stateCode}")
	public ResponseEntity<List<FormLabelsDTO>> getAllLabels(){
		return new ResponseEntity<>(formlabelsService.getAllFormLabels(), HttpStatus.OK);
	}
	
	@GetMapping("/all")
	public ResponseEntity<List<IdcardGetDTO>> getAllIdCards() {   
	    return new ResponseEntity<>(idcardService.getAllIdCards(), HttpStatus.OK);
	}
	
	@GetMapping("/Pdf/{id}")
	public ResponseEntity<?> malePotencyPdf(@PathVariable("id") Long id) throws IOException {
		try {
			byte filedata[] = fileService.generatepdf(id);
			String filename = "empcard(" + id + ").pdf";
			HttpHeaders headers = new HttpHeaders();
			headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + filename);

			return ResponseEntity.ok().headers(headers).contentLength(filedata.length)
					.contentType(MediaType.APPLICATION_PDF).body(new ByteArrayResource(filedata));
		} catch (Exception e) {
			
		
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
		}
	}
	
	@GetMapping("/download/{id}/{fileType}")
	public ResponseEntity<Resource> downloadFile(@PathVariable Long id, @PathVariable String fileType) {
	    // Load file from storage
		Resource file = fileService.getFileByIdAndType(id, fileType); // Implement this

	    String filename = fileType + "_" + id + ".jpg"; // adjust extension based on MIME type

	    return ResponseEntity.ok()
	            .contentType(MediaType.APPLICATION_OCTET_STREAM)
	            .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + filename + "\"")
	            .body(file);
	}
	
	@PostMapping("/generateTransaction")
	public ResponseEntity<String> generateTransaction(@RequestParam String stateCode) {
	    String trn = transactionService.generateTransactionNumber(stateCode);
	    return ResponseEntity.ok(trn);
	}

	@GetMapping("/getAllStates")
    public ResponseEntity<List<StateDTO>> getAllStates() {
        return new ResponseEntity(stateService.getAllStatesList(),HttpStatus.OK);
    }
	
	private Byte[] convertToByteArray(MultipartFile file) throws IOException {
		byte[] bytes = file.getBytes();
		Byte[] byteObjects = new Byte[bytes.length];
		for (int i = 0; i < bytes.length; i++) {
			byteObjects[i] = bytes[i];
		}
		return byteObjects;
	}
	
}
